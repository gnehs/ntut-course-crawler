[{"name": "\u912d\u745e\u6e05", "email": "juiching@ntut.edu.tw", "latestUpdate": "2015-01-28 15:41:28", "objective": "Engineering problems always involve complicated mathematics. Traditionally, solving mathematical equations requires elaborating process of derivation and induction of formula which require students to spend a long time to learn and master the skills and still not every student can achieve the level of expertise to solve these complicated equations. Moreover, many of these equations are not able to solve analytically. With the advance of computing technologies, an ordinary student, when helped by suitable software, can solve those equations which only gifted students could solve before. Not only that, those equations not solvable analytically can be solved today numerically. The purpose of this course is to train undergraduate students to solve engineering problems by using computers. Students will learn not only the theoretical background of numerical methods but also the popular engineering software MATLAB in this class. The choice of MATLAB instead of programming language like FORTRAN, C, or C++ is because MATLAB not only provides an abundant repertoire of programs for solving all kinds of engineering problems but also is a programming language that students use to create his own programs. This will equip students with a powerful tool no matter for higher study or an engineering career in the future. The contents include the following topics.\r\n1.\tIntroduction to numerical method and MATLAB: give introductory examples, useful background material, identification of some basic issues and an introduction of computation and programming with MATLAB.\r\n2.\tRoots of Equations: deals with finding the zeros of a nonlinear function of one variable, as well as methods for minimization of such a function.\r\n3.\tLinear Algebra and Matrices: treat topics from numerical linear algebra. Include solving systems of linear equations, factorization of matrices and matrix inversion.\r\n4.\tCurve Fitting: deals with finding an equation that fits a set of points by linear least-square and nonlinear regression. Include polynomial regression, multiple linear regression, general linear least-square regression, QR factorization and the backslash operator, and nonlinear regression.\r\n5.\tInterpolation: include Newton interpolation, Lagrange interpolation and splines.\r\n6.\tNumerical Integration: give the formula for integrating a function that can not be analytically integrated. Include Newton-Cotes formula, the trapezoidal rule, Simpson\u2019s rule, Romberg integration and Gauss quadrature.\r\n7.\tOrdinary Differential Equations: many engineering problems are solved in ODE form. This is always the most difficult parts of numerical methods. This chapter gives the technique for solving ODE. Include Euler\u2019s method, Runge-Kutta method, multi-step method. \r\n8.\tEigenvalues: gives the technique for finding eigenvalues. Include polynomial method and power method.", "schedule": "1.\tIntroduction to numerical methods and MATLAB \r\n2.\tRoots of equations\r\n3.\tGauss elimination\r\n4.\tLU decomposition\r\n5.\tMatrix inversion and condition\r\n6.\tIterative methods for systems of equations\r\n7.\tCurve fitting of a straight line\r\n8.\tGeneral linear least-square regression and\r\n9.\tNonlinear regression\r\n10.\tPolynomial interpolation and splines\r\n11.\tNumerical integration fomulas\r\n12.\tNumerical integration of functions\r\n13.\tODE: Euler's method\r\n14.\tODE: Runge-Kutta method\r\n15.\tODE: Multi-step methods\r\n16.\tODE: adaptive methods\r\n17.\tEigenvalues: polynomial method\r\n18.\tEigenvalues: power method", "scorePolicy": "16 Weekly programming home work: 80%.\r\nProgramming capability evaluation: 20%.", "materials": "Textbook: Chapra, \u201cApplied Numerical Methods with MATLAB for Engineers and Scientists, 3nd Edition.\u201d, McGraw-Hill.", "foreignLanguageTextbooks": false}]