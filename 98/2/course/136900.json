[{"name": "\u5f35\u539f\u8c6a", "email": "johnsonchang@ntut.edu.tw", "latestUpdate": "2010-02-22 12:44:29", "objective": "\u672c\u8ab2\u7a0b\u4e3b\u8981\u5728\u7814\u8a0e\u50b3\u7d71\u7684\u7d50\u69cb\u5316\u8a9e\u8a00\u7684\u7de8\u8b6f\u6280\u8853\u3002\u8ab2\u7a0b\u6240\u6240\u6db5\u84cb\u7684\u5167\u5bb9\u5305\u62ec\u6709\uff1a\r\n- \u8a9e\u53e5\u4e0a\u7684\u5206\u6790\u3001\u8a9e\u53e5\u5206\u6790\u5668\u7684\u88fd\u4f5c\r\n- \u7531\u4e0a\u800c\u4e0b\u7684\u7d44\u8b6f\u5668\u88fd\u4f5c\r\n- \u7531\u4e0b\u800c\u4e0a\u7684\u7d44\u8b6f\u5668\u88fd\u4f5c\r\n- \u8a9e\u610f\u5206\u6790\r\n- \u6a5f\u5668\u78bc\u4e4b\u7522\u751f\u8207\u66ab\u5b58\u5668\u4e4b\u914d\u7f6e\r\n- \u8cc7\u6599\u6d41\u5206\u6790\u7684\u7406\u8ad6\u8207\u61c9\u7528\r\n- \u7a0b\u5f0f\u78bc\u6700\u4f73\u5316\u8655\u7406\r\n\u8ab2\u7a0b\u7684\u5be6\u65bd\uff0c\u5c07\u4ee5\u57fa\u672c\u7de8\u8b6f\u6280\u8853\u70ba\u4e3b\uff0c\u4f5c\u6df1\u5165\u7684\u4ecb\u7d39\u3002\u5b78\u7fd2\u6240\u5f97\u7684\u89c0\u5ff5\u8207\u6280\u8853\uff0c\u5c07\u5229\u7528\u4e00\u500b\u5be6\u9a57\u6027\u8a9e\u8a00\u7de8\u8b6f\u5668\u7684\u5be6\u4f5c\u4f86\u8cab\u7a7f\u3002\u56e0\u6b64\uff0c\u7a0b\u5f0f\u898f\u756b\u5be6\u4f5c\uff0c\u5c07\u5728\u9019\u500b\u8ab2\u7a0b\u4e2d\uff0c\u4f54\u6709\u76f8\u7576\u5927\u7684\u6bd4\u91cd\u3002", "schedule": "\u9031\u6b21  \u55ae\u5143\u4e3b\u984c\r\n1. Introduction to Compiler\r\n2. Overview: Syntax definition, syntax-directed translation, parsing\r\n3. Overview: Lexical analysis, symbol tables, intermediate code generation\r\n4. Lexical analysis: input buffering, token specification and recognition\r\n5. Lexical analysis: Introduction to the Lexical-Analyzer Generator: Lex\r\n6. Lexical analysis: Finite automata and regular expression\r\n7. Syntax analysis: context-free grammar, top-down parsing and bottom-up parsing\r\n8. Syntax analysis: LR parsing, parser generator\r\n9. Midterm exam\r\n10. Syntax-directed translation: syntax-directed definition (SSD), S-attributed and L-attributed\r\n11. Syntax-directed translation: postfix translation scheme, parser-stack implementation, eliminating left recursion\r\n12. Syntax-directed translation: on-the-fly code generation, LL parsing\r\n13. Intermediate-code generation: three-address code, types and declarations, type checking, control flow\r\n14. Intermediate-code generation: backpatching, switch-statements \r\n15. Run-time environment\r\n16. Code generation: design issues, basic blocks, flow graphs\r\n17. Code generation: optimization for basic blocks, peephole optimization, register allocation and assignment, tree rewriting\r\n18. Final exam", "scorePolicy": "Homework: 30%\r\nMidterm: 30%\r\nFinal Exam: 30%\r\nIn-Class performance: 10% (\uf967\u5b9a\u6642\u9ede\u540d)", "materials": "Compilers: Principles, Techniques, and Tools, second edition, 2007\r\nAuthors: Alfred V. Aho, Monica S. Lam, Ravi Sethi, and Jeffrey D. Ullman\r\nPublisher: Person International Edition\r\nISBN: 0-321-49169-6", "foreignLanguageTextbooks": false}]